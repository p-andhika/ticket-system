/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AuthenticatedRouteRouteImport } from './routes/_authenticated/route'
import { Route as AuthenticatedIndexRouteImport } from './routes/_authenticated/index'
import { Route as authSignupRouteImport } from './routes/(auth)/signup'
import { Route as authSigninRouteImport } from './routes/(auth)/signin'
import { Route as authForgotPasswordRouteImport } from './routes/(auth)/forgot-password'
import { Route as AuthenticatedUserIndexRouteImport } from './routes/_authenticated/user/index'
import { Route as AuthenticatedTodoIndexRouteImport } from './routes/_authenticated/todo/index'
import { Route as AuthenticatedTicketIndexRouteImport } from './routes/_authenticated/ticket/index'
import { Route as AuthenticatedPostIndexRouteImport } from './routes/_authenticated/post/index'

const AuthenticatedRouteRoute = AuthenticatedRouteRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedIndexRoute = AuthenticatedIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)
const authSignupRoute = authSignupRouteImport.update({
  id: '/(auth)/signup',
  path: '/signup',
  getParentRoute: () => rootRouteImport,
} as any)
const authSigninRoute = authSigninRouteImport.update({
  id: '/(auth)/signin',
  path: '/signin',
  getParentRoute: () => rootRouteImport,
} as any)
const authForgotPasswordRoute = authForgotPasswordRouteImport.update({
  id: '/(auth)/forgot-password',
  path: '/forgot-password',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedUserIndexRoute = AuthenticatedUserIndexRouteImport.update({
  id: '/user/',
  path: '/user/',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)
const AuthenticatedTodoIndexRoute = AuthenticatedTodoIndexRouteImport.update({
  id: '/todo/',
  path: '/todo/',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)
const AuthenticatedTicketIndexRoute =
  AuthenticatedTicketIndexRouteImport.update({
    id: '/ticket/',
    path: '/ticket/',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any)
const AuthenticatedPostIndexRoute = AuthenticatedPostIndexRouteImport.update({
  id: '/post/',
  path: '/post/',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/forgot-password': typeof authForgotPasswordRoute
  '/signin': typeof authSigninRoute
  '/signup': typeof authSignupRoute
  '/': typeof AuthenticatedIndexRoute
  '/post': typeof AuthenticatedPostIndexRoute
  '/ticket': typeof AuthenticatedTicketIndexRoute
  '/todo': typeof AuthenticatedTodoIndexRoute
  '/user': typeof AuthenticatedUserIndexRoute
}
export interface FileRoutesByTo {
  '/forgot-password': typeof authForgotPasswordRoute
  '/signin': typeof authSigninRoute
  '/signup': typeof authSignupRoute
  '/': typeof AuthenticatedIndexRoute
  '/post': typeof AuthenticatedPostIndexRoute
  '/ticket': typeof AuthenticatedTicketIndexRoute
  '/todo': typeof AuthenticatedTodoIndexRoute
  '/user': typeof AuthenticatedUserIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_authenticated': typeof AuthenticatedRouteRouteWithChildren
  '/(auth)/forgot-password': typeof authForgotPasswordRoute
  '/(auth)/signin': typeof authSigninRoute
  '/(auth)/signup': typeof authSignupRoute
  '/_authenticated/': typeof AuthenticatedIndexRoute
  '/_authenticated/post/': typeof AuthenticatedPostIndexRoute
  '/_authenticated/ticket/': typeof AuthenticatedTicketIndexRoute
  '/_authenticated/todo/': typeof AuthenticatedTodoIndexRoute
  '/_authenticated/user/': typeof AuthenticatedUserIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/forgot-password'
    | '/signin'
    | '/signup'
    | '/'
    | '/post'
    | '/ticket'
    | '/todo'
    | '/user'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/forgot-password'
    | '/signin'
    | '/signup'
    | '/'
    | '/post'
    | '/ticket'
    | '/todo'
    | '/user'
  id:
    | '__root__'
    | '/_authenticated'
    | '/(auth)/forgot-password'
    | '/(auth)/signin'
    | '/(auth)/signup'
    | '/_authenticated/'
    | '/_authenticated/post/'
    | '/_authenticated/ticket/'
    | '/_authenticated/todo/'
    | '/_authenticated/user/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthenticatedRouteRoute: typeof AuthenticatedRouteRouteWithChildren
  authForgotPasswordRoute: typeof authForgotPasswordRoute
  authSigninRoute: typeof authSigninRoute
  authSignupRoute: typeof authSignupRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/': {
      id: '/_authenticated/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthenticatedIndexRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/(auth)/signup': {
      id: '/(auth)/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof authSignupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/signin': {
      id: '/(auth)/signin'
      path: '/signin'
      fullPath: '/signin'
      preLoaderRoute: typeof authSigninRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/forgot-password': {
      id: '/(auth)/forgot-password'
      path: '/forgot-password'
      fullPath: '/forgot-password'
      preLoaderRoute: typeof authForgotPasswordRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/user/': {
      id: '/_authenticated/user/'
      path: '/user'
      fullPath: '/user'
      preLoaderRoute: typeof AuthenticatedUserIndexRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/todo/': {
      id: '/_authenticated/todo/'
      path: '/todo'
      fullPath: '/todo'
      preLoaderRoute: typeof AuthenticatedTodoIndexRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/ticket/': {
      id: '/_authenticated/ticket/'
      path: '/ticket'
      fullPath: '/ticket'
      preLoaderRoute: typeof AuthenticatedTicketIndexRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/post/': {
      id: '/_authenticated/post/'
      path: '/post'
      fullPath: '/post'
      preLoaderRoute: typeof AuthenticatedPostIndexRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
  }
}

interface AuthenticatedRouteRouteChildren {
  AuthenticatedIndexRoute: typeof AuthenticatedIndexRoute
  AuthenticatedPostIndexRoute: typeof AuthenticatedPostIndexRoute
  AuthenticatedTicketIndexRoute: typeof AuthenticatedTicketIndexRoute
  AuthenticatedTodoIndexRoute: typeof AuthenticatedTodoIndexRoute
  AuthenticatedUserIndexRoute: typeof AuthenticatedUserIndexRoute
}

const AuthenticatedRouteRouteChildren: AuthenticatedRouteRouteChildren = {
  AuthenticatedIndexRoute: AuthenticatedIndexRoute,
  AuthenticatedPostIndexRoute: AuthenticatedPostIndexRoute,
  AuthenticatedTicketIndexRoute: AuthenticatedTicketIndexRoute,
  AuthenticatedTodoIndexRoute: AuthenticatedTodoIndexRoute,
  AuthenticatedUserIndexRoute: AuthenticatedUserIndexRoute,
}

const AuthenticatedRouteRouteWithChildren =
  AuthenticatedRouteRoute._addFileChildren(AuthenticatedRouteRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  AuthenticatedRouteRoute: AuthenticatedRouteRouteWithChildren,
  authForgotPasswordRoute: authForgotPasswordRoute,
  authSigninRoute: authSigninRoute,
  authSignupRoute: authSignupRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
